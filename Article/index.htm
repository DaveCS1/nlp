<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Comparison of Three Natural Lang</title>
</head>

<body>

<p>Comparison of Three Natural Language Processors, AlchemyAPI, OpenCalais, and 
Semantria</p>
<p><img border="0" src="screenshot-small.png" width="743" height="511"></p>
<h2>Source Code</h2>
<p>The source code for this article is located here:
<a href="https://github.com/cliftonm/nlp">https://github.com/cliftonm/nlp</a></p>
<p>To run the code, you will need to register with each of the NLP providers and 
obtain an API key (discussed below.)</p>
<h2>Introduction</h2>
<p>I've been looking into Natural Language Processors (NLP's) and thought I 
would share the results of my investigations.&nbsp; We'll look at:</p>
<ul>
	<li>Pricing</li>
	<li>.NET support</li>
	<li>API call examples</li>
	<li>NLP results</li>
</ul>
<p>I've reviewed three NLP providers: AlchemyAPI, OpenCalais, and Semantria.&nbsp; 
They each offer similar services in that they will process text, producing a 
list of entities and relevance of those entities, along with additional 
information that is unique to each provider which I'll explore briefly as well.&nbsp; I have a particular interest in using NLP's to acquire the semantic content 
from websites (blogs, news feeds, articles, etc.) and began investing three 
NLP's (AlchemyAPI, OpenCalais, and 
Semantria) with regards to price and features.&nbsp; You can also read my 
article on how I use the AlchemyAPI service to parse RSS feeds
<a href="http://www.codeproject.com/Articles/797457/The-Semantic-Web-and-Natural-Language-Processing">
here</a>. For my particular purposes, 
I was interested in a low-document volume service that was hopefully free for 
limited use and that could provide web page content scraping.&nbsp; As I started 
investigating these three services, it occurred to me that this might be useful 
information for others as well, and thus this article came into being.</p>
<p>With regards to my specific requirements (for a different project) the upshot 
is that only AlchemyAPI and OpenCalais 
provide the price point (free for my small volume requirements) and only AlchemyAPI provides the webpage scraping functionality natively, 
as opposed to using a potentially costly third-party package.&nbsp; That said, 
my requirements are obviously not yours and you should choose a provider 
accordingly.</p>
<h3>What is an NLP?&nbsp; </h3>
<p><i>&quot;Natural language processing (NLP) is a field of computer science, 
artificial intelligence, and linguistics concerned with the interactions between 
computers and human (natural) languages. As such, NLP is related to the area of 
human–computer interaction. Many challenges in NLP involve natural language 
understanding, that is, enabling computers to derive meaning from human or 
natural language input, and others involve natural language generation.&quot; </i>(<a href="http://en.wikipedia.org/wiki/Natural_language_processing">wikipedia</a>)</p>
<h3>Uses for NLP</h3>
<p>Borrowing from another NLP provider, <a href="http://www.smartlogic.com/">
Smartlogic</a>, which I have not reviewed here:</p>
<p><i>&quot;The ability to derive metadata, often in real-time, means that 
information locked-up in content can be made available alongside Big Data flows. 
It is this metadata that will help you turn Big Data into smart data for use in 
decision support.&quot;</i></p>
<p>and...</p>
<p><i>&quot;The resulting metadata drives an array of business-critical tasks 
including:</i></p>
<ul>
	<li><i>Semantic user experience for search</i></li>
	<li><i>Text analytics</i></li>
	<li><i>Workflow processes driven by meaning</i></li>
	<li><i>Regulatory compliance involving unstructured content</i></li>
	<li><i>Automatic classification for Content management</i></li>
	<li><i>Decision support using information locked-up in content</i></li>
	<li><i>Knowledge management</i></li>
	<li><i>Policy application for records management</i></li>
	<li><i>Content visualization</i></li>
	<li><i>Content monetization</i></li>
	<li><i>Improved SEO</i></li>
	<li><i>Text mining&quot;</i></li>
</ul>
<p>I think that says it very well.</p>
<h2>But What Does an NLP Actually Do?</h2>
<p>Each of the three NLP services that I review here parse text and determine 
something called &quot;entities.&quot;&nbsp; While each of the services gives some 
examples of entities, only Semantria provides a clear definition of what an 
entity is: <i>&quot;Semantria’s Named Entity Extraction (NER) feature automatically 
pulls proper nouns from text, such as people, places, companies, brands, job 
titles and more. Each extracted named entity is classified, tagged and assigned 
a sentiment score, which gives meaning and context to each entity.&quot;</i> (<a href="https://semantria.com/features/entity-extraction">https://semantria.com/features/entity-extraction</a>)
</p>
<p>In other words, the primary purpose of an NLP is to extract the nouns, 
determine their types, and provide some &quot;scoring&quot; (relevance or sentiment) of 
the entity within the text.&nbsp; Using relevance, one can supposedly filter out 
entities to those that are most relevant in the document.&nbsp; Using sentiment 
analysis, one can determine the overall sentiment of an entity in the document, 
useful for determining the &quot;tone&quot; of the document with regards to an entity -- 
for example, is the entity &quot;sovereign debt&quot; described negatively, neutrally, or 
positively in the document?&nbsp; NLP's are also capable of extracting higher 
order concepts and, in the case of OpenCalais, events.</p>
<p>According to the OpenCalais documentation: <i>&quot;Entity relevance scores are 
comparable across input texts. This means that you can use entity relevance 
scores in order to determine entity relevance at a collection level, not just at 
a document level.&quot; </i>(<a href="http://www.opencalais.com/documentation/calais-web-service-api/api-metadata/entity-relevance-score">http://www.opencalais.com/documentation/calais-web-service-api/api-metadata/entity-relevance-score</a>) 
If this meaning can be applied to the other providers, it is a useful value for 
comparing against other documents, but without a definitive meaning of the term 
&quot;relevance&quot;, I'm not sure what the results of such a comparison actually mean.&nbsp; 
To my knowledge, Semantria is the only NLP service that can natively compare 
documents, which is a feature I do not explore in this article.</p>
<h3>Entity Extraction</h3>
<p>Entities are things such as people, companies, 
organizations, cities, geographic features, and so forth.&nbsp; In edition to 
the extraction of the entity, each service provides additional information about 
the entity, usually a relevance or sentiment.</p>
<h4>AlchemyAPI Entity</h4>
<p>AlchemyAPI's entity has several attributes:</p>
<ul>
	<li>Type</li>
	<li>Relevance</li>
	<li>Count </li>
	<li>Text</li>
</ul>
<p>Also, sentiment 
analysis is turned off by default, as it incurs an additional transaction count 
against one's daily/monthly allowance.</p>
<p>AlchemyAPI also supports the concept of &quot;linked data&quot;.&nbsp; <i>&quot;Linked Data 
is a method of exposing, sharing, and connecting data on the Web via 
dereferenceable URIs. Linked Data aims to extend the Web with a data commons by 
publishing various open datasets as RDF on the Web and by setting RDF links 
between data items from different data sources. The Linked Data cloud currently 
consists of over 7.4 billion RDF triples, interlinked by 142+ million RDF 
links.&quot; </i>(<a href="http://www.alchemyapi.com/api/linked-data-support/">http://www.alchemyapi.com/api/linked-data-support/</a>.)&nbsp; 
Linked data is partially demonstrated in Concepts (see below) in the 
demonstration program.&nbsp; Currently, Alchemy draws on several linked data 
resources (see the link above as well as <a href="http://linkeddata.org/.">
http://linkeddata.org/</a>.) </p>
<h4>OpenCalais Entity</h4>
<p>Note that in this demo, I'm using OpenCalais' &quot;Simple Format&quot; output.&nbsp; According to Ofer Harari:</p>
<p><i>&quot;Simple Format output which is the poorest format in terms of capabilities 
(Simple format is for a quick and easy output from Calais. Not for a detailed 
response). The standard format is RDF or JSON. These outputs include all the 
metadata that Open Calais can extract.&quot;</i></p>
<p><i>&quot;The Resource Description Framework (RDF) is a family of World Wide Web 
Consortium (W3C) specifications [1] originally designed as a metadata data 
model. It has come to be used as a general method for conceptual description or 
modeling of information that is implemented in web resources, using a variety of 
syntax notations and data serialization formats. It is also used in knowledge 
management applications.&quot;</i> (<a href="http://en.wikipedia.org/wiki/Resource_Description_Framework">http://en.wikipedia.org/wiki/Resource_Description_Framework</a>)
</p>
<p>It was being the scope of this article to parse the resulting RDF.</p>
<p>An OpenCalais entity has several attributes:</p>
<ul>
	<li>Value</li>
	<li>Frequency</li>
	<li>Relevance</li>
	<li>Type</li>
</ul>
<p>OpenCalais supports linking entities to DBpedia, Wikipedia, Freebase, 
Reuters.com, GeoNames, Shopping.com, IMDB, LinkedMDB.&nbsp; This feature is not 
demonstrated in the demo code.&nbsp; See also&nbsp;
<a href="http://linkeddata.org/.">http://linkeddata.org/</a>.)</p>
<h4>Semantria's Entity</h4>
<p>Semantria's entity has several attributes (which basically conflicts with the 
documentation on their web page
<a href="https://semantria.com/features/entity-extraction">
https://semantria.com/features/entity-extraction</a>.)</p>
<ul>
	<li>Type</li>
	<li>Evidence</li>
	<li>Confident</li>
	<li>IsAbout</li>
	<li>EntityType</li>
	<li>Title</li>
	<li>Label</li>
	<li>Sentiment Score</li>
	<li>Sentiment Polarity</li>
</ul>
<h3>Other Semantic Information</h3>
<p>In addition, each provides several additional categories of parsing.&nbsp; Be 
aware that the names of these categories and their attributes is derived from 
the API names.</p>
<p><u>AlchemyAPI</u></p>
<ul>
	<li>Keywords<ul>
		<li>attributes of Keywords are Text and Relevance</li>
	</ul>
	</li>
	<li>Concepts<ul>
		<li>attributes of Concepts are Text, Relevance, dbpedia (linked data), 
		freebase (linked data), and opencyc (linked data.)</li>
	</ul>
	</li>
	<li>Relationships - <i>&quot;AlchemyAPI provides the ability to identify named 
	entities within subjects and objects of identified Subject-Action-Object 
	relations, supporting advanced entity recognition capabilities including 
	disambiguation, coreference resolution, and linked data output.&quot;</i> (<a href="http://www.alchemyapi.com/api/relation/entities.html">http://www.alchemyapi.com/api/relation/entities.html</a>)&nbsp; 
	I do not show relationship information in the demo code.</li>
</ul>
<p><u>OpenCalais</u></p>
<ul>
	<li>Topics<ul>
		<li>&nbsp;attributes of Topics are Value, Score, and Taxonomy (so far 
		I've only seen &quot;Calais&quot; for taxonomy.)</li>
	</ul>
	</li>
	<li>Events<ul>
		<li>attributes of Events is EventName</li>
	</ul>
	</li>
</ul>
<p><u>Semantria</u></p>
<ul>
	<li>Topics<ul>
		<li>attributes are Title, Type, Hitcount, StrengthScore, SentimentScore, Label, and 
		SentimentPolarity</li>
	</ul>
	</li>
	<li>Themes - <i>&quot;Semantria extracts themes within your content so that you 
	can determine and follow trends that appear over a period of time. Themes 
	are noun phrases extracted from text and are the primary means of 
	identifying the main ideas within your content. In addition, Semantria 
	assigns a sentiment score to each extracted theme, so you’ll understand the 
	tone behind the themes.&quot;</i> (<a href="https://semantria.com/features/themes">https://semantria.com/features/themes</a>) 
	<ul>
		<li>attributes are Evidence, IsAbout, StrengthScore, SentimentScore, 
		SentimentPolarity, Title</li>
	</ul>
	</li>
</ul>
<h3>Anaphora Resolution</h3>
<p>As pointed out by the folks at OpenCalais, NLP includes something called 
anaphora resolution:</p>
<p><i>&quot;In linguistics, anaphora /&#601;&#712;næf&#601;r&#601;/ is the use of an expression the 
interpretation of which depends upon another expression in context (its 
antecedent or postcedent). In the sentence Sally arrived, but nobody saw her, 
the pronoun her is anaphoric, referring back to Sally. The term anaphora denotes 
the act of referring, whereas the word that actually does the referring is 
sometimes called an anaphor (or cataphor).&quot; </i>(<a href="http://en.wikipedia.org/wiki/Anaphora_(linguistics)">http://en.wikipedia.org/wiki/Anaphora_%28linguistics%29</a>)
</p>
<p>It first puzzled me as to why the counts of entities were often higher than 
the actual instances of those entities, and the above explains the reason why.</p>
<h2>The Three Contenders</h2>
<p>We'll look shortly at what each of the three providers has to say about 
themselves.&nbsp; First however, I'd like to talk a little about document 
processing, web content scraping, and initialization.</p>
<h3>Documents and Web Content Scraping</h3>
<p>All three providers can work with text documents, however only AlchemyAPI 
provides web content scraping directly as part of the API.&nbsp; OpenCalais and Semantria are both document-based 
NLP's and as such require that that the web page scraping has been performed a 
priori.&nbsp; While AlchemyAPI uses its own web page scraping technology,&nbsp; Semantria 
can integrate with
<a href="http://www.diffbot.com/">Diffbot</a> for this service.&nbsp;For the purposes of this demo 
(since DiffBot offers only a 7 day limited free trial), I 
will be using AlchemyAPI's <code>URLGetText</code> API method to provide the 
scraped content for the OpenCalais and Semantria NLP's.&nbsp; </p>
<pre>/// &lt;summary&gt;
/// We use AlchemyAPI to get the page text for OpenCalais and Semantria.
/// &lt;/summary&gt;
protected string GetPageText(string url)
{
  AlchemyWrapper alchemy = new AlchemyWrapper();
  alchemy.Initialize();

  string xml = alchemy.GetUrlText(url);
  XmlDocument xdoc = new XmlDocument();
  xdoc.LoadXml(xml);

  return xdoc.SelectSingleNode(&quot;//text&quot;).InnerText;
}</pre>
<p>To reduce this hits on the AlchemyAPI server, extracting the URL content is 
cached based on the URL hashcode:</p>
<pre>/// &lt;summary&gt;
/// Uses AlchemyAPI to scrape the URL. Also caches the URL, so
/// we don't hit AlchemyAPI's servers for repeat queries.
/// &lt;/summary&gt;
protected string GetUrlText(string url)
{
  string urlHash = url.GetHashCode().ToString();
  string textFilename = urlHash + &quot;.txt&quot;;
  string pageText;

  if (File.Exists(textFilename))
  {
    pageText = File.ReadAllText(textFilename);
  }
  else
  {
    pageText = GetPageText(url); 
  }

  File.WriteAllText(textFilename, pageText);

  return pageText;
}</pre>
<p>This way, the text being handed to each NLP will be the same.&nbsp; If you're not processing content from web pages (blogs, news feeds, articles, 
etc.) then this is a moot point with regards to OpenCalais and Semantria.&nbsp; </p>
<h3>Initialization and Limits</h3>
<p>Initialization of AlchemyAPI and OpenCalais is very simple.&nbsp; One of the 
issues that you may encounter however is limits to the number of entities (or 
other items) returned.&nbsp; While OpenCalais does not impose any limits, 
AlchemyAPI defaults to 50 entities (with a maximum I believe of 250) and Semantria defaults to 5 
(with a maximum of 50).&nbsp; Changing 
the limit in AlchemyAPI is very simple -- you pass in some additional parameters 
when requesting the processing:</p>
<pre>eparams = new AlchemyAPI_EntityParams();
eparams.setMaxRetrieve(250);</pre>
<p>Semantria is tailored more toward bulk document processing.&nbsp; You can 
have a large number of different configurations that you can choose from 
depending on the document you want processed.&nbsp; Initialization of these 
configurations however takes some time to communicate to the server and the get 
a response back.&nbsp; In the demo code, I first request the 
current configurations (there are 8 initially based on language) and then I 
change the limit (which has a maximum of 50) and then this new configuration 
must be uploaded.&nbsp; </p>
<pre>protected void IncreaseLimits()
{
  // This takes considerable time to get the configurations back from the server.
  List&lt;Configuration&gt; configurations = session.GetConfigurations();
  config = configurations.FirstOrDefault(item =&gt; item.Language.Equals(&quot;English&quot;));

  if (config != null)
  {
    config.Document.NamedEntitiesLimit = 50;
    config.Document.ConceptTopicsLimit = 50;
    config.Document.EntityThemesLimit = 50;
    session.UpdateConfigurations(new List&lt;Configuration&gt;() { config });
  }
}</pre>
<p>This all takes time and is why the Process button is disabled for so long 
at application startup.&nbsp; However, once done, the configurations can be 
used without further time penalty.&nbsp; It is also interesting to note that the 
configurations are persisted between sessions -- I assume they are associated 
with your API key, so once configurations are created, technically I don't need 
to run this step unless I want to make a change.&nbsp; For this reason, the 
method IncreaseLimits() in the Initialize method can be commented out after you first configure Semantria:</p>
<pre>public void Initialize()
{
  string apikey = File.ReadAllText(&quot;semantriaapikey.txt&quot;);
  string[] keys = apikey.Split('\r');
  consumerKey = keys[0].Trim();
  consumerSecret = keys[1].Trim();
  serializer = new JsonSerializer();
  session = Session.CreateSession(consumerKey, consumerSecret, serializer);

  IncreaseLimits();     // &lt;---- Comment me out when the limits have been increased after the first-ever run
}</pre>
<h3>AlchemyAPI</h3>
<p><img border="0" src="alchemylogo.png" width="459" height="110"></p>
<p><img border="0" src="alchemy1.png" width="993" height="206"></p>
<p><a href="http://www.alchemyapi.com/">http://www.alchemyapi.com/</a> </p>
<p><i>&quot;AlchemyAPI is helping pioneer a computer’s ability to understand human 
language and vision. Our web services for real-time text analysis and computer 
vision give you the intelligence needed to transform vast amounts of 
unstructured data into actions that drive your business.&nbsp; Now you can 
easily perform sentiment analysis, keyword extraction, entity extraction, image 
tagging and much more on the massive volumes of web pages, documents, tweets and 
photos produced every second.&quot;</i></p>
<p>One of the unique things about AlchemyAPI that I noticed right away is that 
it performs analysis not just on text but also on images.</p>
<p>AlchemyAPI supports named entity, keyword, and text extraction for content in 
the following eight languages:</p>
<ul>
	<li>English</li>
	<li>French</li>
	<li>German</li>
	<li>Italian</li>
	<li>Portuguese</li>
	<li>Russian</li>
	<li>Spanish</li>
	<li>Swedish</li>
</ul>
<p>Content sentiment analysis currently supports English and German, with 
support for additional languages in development.</p>
<p>To avoid biasing the timing results, I first request the page text using 
AlchemyAPI and then feed this text into all three NLP's.&nbsp; It should be 
noted that this produces worse timing for AlchemyAPI than if I had provided the 
web page URL directly -- meaning that if you give AlchemyAPI the URL, it 
performs better, and in many cases, significantly better than the other two.</p>
<h3>OpenCalais</h3>
<p><img border="0" src="opencalaislogo.png" width="258" height="120"></p>
<p><img border="0" src="opencalais1.png" width="988" height="202"></p>
<p><a href="http://www.opencalais.com/">http://www.opencalais.com/</a> </p>
<p><i>&quot;We want to make all the world's content more accessible, interoperable 
and valuable. Some call it Web 2.0, Web 3.0, the Semantic Web or the Giant 
Global Graph - we call our piece of it Calais.&nbsp; Calais is a rapidly growing 
toolkit of capabilities that allow you to readily incorporate state-of-the-art 
semantic functionality within your blog, content management system, website or 
application.&quot;</i></p>
<p>OpenCalais supports English, French and Spanish.</p>
<p>OpenCalais </p>
<h3>Semantria</h3>
<p><img border="0" src="semantrialogo.png" width="424" height="120"></p>
<p><img border="0" src="semantria1.png" width="962" height="191"></p>
<p><a href="https://semantria.com/">https://semantria.com/</a> </p>
<p><i>&quot;Semantria applies Text and Sentiment Analysis to tweets, facebook posts, 
surveys, reviews or enterprise content.&nbsp; Semantria is a complete 
cloud-based text and sentiment analysis solution launched in 2011.&nbsp; Faster 
than a human (60,000x), more accurate than 2 humans (80% of the time it's flat 
out smarter), and living in the Amazon cloud, Semantria extracts the meaning, 
tone, and so much more from any text it’s given.&quot;</i></p>
<p>One of the interesting things about Semantria is the Excel plugin: <i>&quot;Semantria 
is the only Text and Sentiment Analysis solution for Excel.&nbsp; It turns it 
into a powerful and easy-to-use tool for monitoring and visualizing Twitter, 
Facebook, surveys and other unstructured data.&quot;</i></p>
<p>Also, Semantria supports these languages:</p>
<ul>
	<li>English (US/UK)</li>
	<li>French (FR/CA)</li>
	<li>Spanish</li>
	<li>Portuguese</li>
	<li>Italian</li>
	<li>German</li>
	<li>Mandarin (Traditional and Simplified)</li>
	<li>Korean</li>
	<li>Japanese (beta)</li>
	<li>Malay (Bahasa Melayu)</li>
	<li>Indonesian (Bahasa Indonesia)</li>
	<li>Singlish (Singapore Colloquial Language)</li>
</ul>
<p>Also, Semantria integrates tightly with <a href="http://www.diffbot.com/">
Diffbot</a> for webpage scraping.</p>
<h2>Pricing</h2>
<p>Pricing varies considerably and is based on number of transactions being 
processed daily/monthly and level of customer support.</p>
<h3>AlchemyAPI</h3>
<p>The pricing that I describe here may not be up on the AlchemyAPI website at 
the time of this writing, as I was notified directly that the pricing structure 
was being changed.</p>
<p>There are five tiers:</p>
<ol>
	<li>Free: 1,000 transactions / day, supporting five concurrent requests, no 
support</li>
	<li>$250/month: 90,000 transactions / month, 5 concurrent requests, email support</li>
	<li>$750/month: 300,000 transactions / month, 15 concurrent requests, email 
support</li>
	<li>$1750/month: 3,000,000 transactions / month, 25 concurrent requests, email 
and phone support, uptime guarantee</li>
	<li>Custom for more than 3M transactions.</li>
</ol>
<p>For academia, AlchemyAPI offers an increased number of transactions per day 
in the Free tier.</p>
<p>There is also a &quot;Performance and Support Package&quot; that you can select:</p>
<ul>
	<li>Free</li>
	<li>Pro plan - $595 / mo</li>
	<li>Enterprise plan - $1995 / mo</li>
</ul>
<p>As well as a month-to-month subscription option:</p>
<ul>
	<li>First 250,000 transactions / mo: $0.0035 / transaction</li>
	<li>Next 750,000 transactions /mo: $0.0015 / transaction</li>
	<li>Next 1,000,000 transactions /mo: $0.00075 / transaction</li>
	<li>Next 3,000,000 transactions /mo: $0.00050 / transaction</li>
	<li>Anything over 5,000,000 transactions / mo: $0.0035 / transaction</li>
</ul>
<h3>OpenCalais</h3>
<p>Free: 50,000 transactions per license per day and four transactions per 
second</p>
<p>Commercial License: <i>&quot;Our commercial services provide the same 
functionality as OpenCalais but with a production-strength twist. The service 
provides a high-performance SLA, a daily transaction limit of 100,000 
transactions and an enhanced 20 transactions per second rate. Additional volume 
blocks up to maximum of 2,000,000 transactions per day are available. 
ProfessionalCalais meets needs unique to larger-scale publishers. 
ProfessionalCalais is available as an annual contract.&quot;</i></p>
<h3>Semantria</h3>
<p>There are five tiers:</p>
<ol>
	<li>Free Trial: First 10,000 transactions (total, not per month) free, full 
featured (although see below in the API discussion for issues that I 
encountered)</li>
	<li>$999/month: Excel Seat, unlimited transactions</li>
	<li>$999/month: API Standard, 100,000 transactions / month, some limits (like 
number of supported languages)</li>
	<li>$1999/month: API Premium, 1,000,000 transactions / month</li>
	<li>Custom for more than 1M transactions per month</li>
</ol>
<p>DiffBbot, which integrates with Semantria for webpage scraping, has its own 
pricing structure and I am not aware of how that changes the pricing structure. </p>
<h2>API's</h2>
<p>Each provider requires that you obtain a product key to interface with the 
API, which is a simple process.&nbsp; I have not included my keys, so to run the 
code, you will need to register with each provider to obtain your own API key and place it into the 
appropriate text file (see the code for filenames.)&nbsp; Because I'm working in 
C# / .NET, I obtained a .NET library to handle the SOAP/REST calls, either from 
the provider directly or one that I was referred to by the provider.&nbsp; All 
API's provided examples and various degrees of unit tests.</p>
<h3>AlchemyAPI</h3>
<p>The AlchemyAPI, to put it simply, just worked.&nbsp; It provided the 
functionality that I was looking for (give it a URL and it returns semantic 
results) and it worked without any issues, which was not my experience with OpenCalais or Semantria, 
though in hindsight, my issues with Semantria were more related to not fully 
understanding the document queuing model that Semantria uses.&nbsp; Interfacing with the .NET API that 
AlchemyAPI provides 
is quite simple, for example:</p>
<pre>protected AlchemyAPI.AlchemyAPI alchemyObj;

public void Initialize()
{
  alchemyObj = new AlchemyAPI.AlchemyAPI();
  alchemyObj.LoadAPIKey(&quot;alchemyapikey.txt&quot;);
}

// Process a URL directly.
public DataSet LoadEntitiesFromUrl(string url)
{
  DataSet dsEntities = new DataSet();
  string xml = alchemyObj.URLGetRankedNamedEntities(url);
  TextReader tr = new StringReader(xml);
  XmlReader xr = XmlReader.Create(tr);
  dsEntities.ReadXml(xr);
  xr.Close();
  tr.Close();

  return dsEntities;
}</pre>
<p>AlchemyAPI returns an XML document 
that is well suited for loading directly into a <code>DataSet</code>, as seen by 
the above code.</p>
<p>One issue I encountered with the .NET AlchemyAPI was that a useful exception 
message was not being returned, so I modified it slightly to return the message 
from the server as part of the exception:</p>
<pre>if (status.InnerText != &quot;OK&quot;)
{
  string errorMessage = &quot;Error making API call.&quot;;

  try
  {
    XmlNode statusInfo = root.SelectSingleNode(&quot;/results/statusInfo&quot;);
    errorMessage = statusInfo.InnerText;
  }
  catch
  {
    // some problem with the statusInfo. Return the generic message.
  }

  System.ApplicationException ex = new System.ApplicationException (errorMessage);

  throw ex;
}</pre>
<p>This change has been folded into the
<a href="https://github.com/AlchemyAPI/alchemyapi_csharp">C# AlchemyAPI hosted 
on GitHub</a>.</p>
<p>AlchemyAPI's content size limits are 150KB of cleaned text and 600KB of HTML.</p>
<h3>OpenCalais</h3>
<p>The <a href="http://opencalais.codeplex.com/">Open Calais .NET library</a> on 
Codeplex was the most difficult of the three libraries to work with, requiring me to fix 
the entity enumerator.&nbsp; The first issue with this library is that, when you 
unzip it, all the files are read-only.&nbsp; This made it impossible to load 
the projects and solutions into VS2012 without first changing all the files and 
folders to read-write.</p>
<p>Second, using their sample document, I was getting 
&quot;Unhandled Exception: System.ArgumentException: Requested value 'PoliticalEvent' 
was not found.&quot; because there were missing types in the <code>CalaisSimpleEntityType</code> 
enumerator:</p>
<pre>// Ignore topics and events are they are processed seperately
if (elementName != &quot;Topics&quot; &amp;&amp; elementName != &quot;Event&quot; &amp;&amp; elementName != &quot;Topic&quot;)
{
  newSimpleEntity.Type = (CalaisSimpleEntityType)Enum.Parse(typeof(CalaisSimpleEntityType), result.Name.ToString());
  yield return newSimpleEntity;
}</pre>

<p>To fix this, I had to go in and change this class:</p>
<pre>public class CalaisSimpleEntity
{
  public string Value { get; set; }
  public int Frequency { get; set; }
  public string Relevance { get; set; }
  public CalaisSimpleEntityType Type { get; set; }
}</pre>
<p>so that Type was a string (why it's mapped to an enumeration is beyond me):</p>
<pre>public class CalaisSimpleEntity
{
  public string Value { get; set; }
  public int Frequency { get; set; }
  public string Relevance { get; set; }
  public string Type { get; set; }
}</pre>
<p>and the offending line of code:</p>
<pre>newSimpleEntity.Type = result.Name.ToString();</pre>
<p>I also had to fix a unit test that failed to compile as the result of the 
type change.</p>
<p>I also found it annoying that the properties for Entities, Topics, and Events are 
IEnumerable's, meaning you have to explicitly iterate through the collection to 
acquire the contents, which, underlying, involves some processing of the XML document.&nbsp; This 
seems inefficient, especially if the collection is iterated over many times by 
different functions, 
but can be worked around by converting the collections to lists, as I did in the 
simple &quot;get&quot; functions, for example:</p>
<pre>return document.Entities.ToList();</pre>
<p>Given that the contents of these collections is unchanging, I see no reason 
not to pre-populate the collections with their items.</p>
<p>My other issue with OpenCalais is that my sample document (the 
text of Wikipedia's page on Computer Science) resulted in a &quot;content is not 
valid&quot; exception from the server.&nbsp; It turns out that the offending sentence 
is this:</p>
<p><i>The term is used mainly in the Scandinavian countries. Also, in the early 
days of computing, a number of terms for the practitioners of the field of 
computing were suggested in the Communications of the ACM – turingineer, 
turologist, flow-charts-man, applied meta-mathematician, and applied 
epistemologist.[34] </i><br>
<br>
and can be further reduced to the use of the &quot;–&quot; character -- the Unicode 
character 0x2013 &quot;EN DASH&quot;.&nbsp; OpenCalais is apparently rather sensitive, but 
we can strip Unicode:</p>
<pre>// A couple options: http://stackoverflow.com/questions/123336/how-can-you-strip-non-ascii-characters-from-a-string-in-c
string asAscii = Encoding.ASCII.GetString(
  Encoding.Convert(
    Encoding.UTF8,
    Encoding.GetEncoding(
        Encoding.ASCII.EncodingName,
        new EncoderReplacementFallback(string.Empty),
        new DecoderExceptionFallback()
    ),
    Encoding.UTF8.GetBytes(content)
  )
); </pre>
<p>Once properly sanitized, the actual call to parse the document and extract 
data is very simple:</p>
<pre>CalaisDotNet calais = new CalaisDotNet(apikey, asAscii);
document = calais.Call&lt;CalaisSimpleDocument&gt;();

...

public IList GetEntities()
{
  return document.Entities.ToList();
}</pre>
<h4>Other Tidbits Regarding OpenCalais</h4>
<p>There is a complementary service, <a href="http://semanticproxy.com/">
http://semanticproxy.com/</a>, that is supposed to perform content scraping, 
however, when I tried to use it (at different times) I constantly received a 
&quot;Java out of memory&quot; error.</p>
<p>In this demonstration code, I am using &quot;Simple Format&quot; output.&nbsp; 
According to Ofer Harari:</p>
<p><i>&quot;Simple Format output which is the poorest format in terms of capabilities 
(Simple format is for a quick and easy output from Calais. Not for a detailed 
response). The standard format is RDF or JSON. These outputs include all the 
metadata that Open Calais can extract.&quot;</i></p>
<h3>Semantria</h3>
<p>I originally found Semantria's .NET API to be complicated to work with, 
which I realized after having success with it was that it takes a different 
approach to processing documents.&nbsp; With AlchemyAPI and OpenCalais, you make 
the call and wait for the results.&nbsp; With Semantria, it is very bulk-document 
centric.&nbsp; Documents that are sent to the Semantria servers are queued and 
can return asynchronously with results or in a different order from the original 
input into the queue.&nbsp; This makes working with a single document more 
complex (see code below) but clearly, the strength of Semantria's API is much 
more evident when working with bulk documents. </p>
<p>There are also two modes of document analysis, described here:
<a href="https://semantria.com/support/developer/overview/processing">
https://semantria.com/support/developer/overview/processing</a> </p>
<ol>
	<li>Detailed Mode</li>
	<li>Discovery Mode</li>
</ol>
<h4>Detailed Mode</h4>
<p><i>&quot;After submitting documents to be queued, each document will be analyzed 
independently of the others. Semantria API will return an analysis for each 
document.&quot;</i></p>
<h4>Discovery Mode</h4>
<p><i>&quot;This method submits an array of documents to be analyzed in relation to 
each other and returns one output. Discovery analysis will contain a summary of 
commonalities, sentiments, named entity extraction, themes, and categorization 
for all the documents in the collection.&quot;</i></p>
<p>This article reviews Detailed Mode only, however, when working with Discovery 
Mode I &quot;discovered&quot; an issue with document size--with my scraped 
webpage content string, I was getting 
&quot;line too long&quot; exceptions.&nbsp; It seems that Discovery Mode is 
intended to work with smaller datasets, such as paragraphs or single sentences.&nbsp; 
I am not sure what the line limit is when in Discovery Mode.</p>
<p>Calling the parser requires polling to see if the document is analyzed.&nbsp; 
While there is a DocsAutoResponse event callback, this isn't what it seems -- if 
the document is queued (which is the standard behavior) this callback is never 
made, and I'm not sure how this event helps, unless it is associated with the 
bulk processing.&nbsp; Here is the parse request and response poll code:</p>
<pre>public void ParseUrl(string content)
{
  string docId = Guid.NewGuid().ToString();
  Document doc = new Document() {Id = docId, Text = content};
  docResults = new List&lt;DocAnalyticData&gt;();
  int result = session.QueueDocument(doc, configID);
  DocAnalyticData ret;
  DateTime start = DateTime.Now;

  do
  {
    // Semantria guarantees a result within 10 seconds. But how fast is it really?
    Thread.Sleep(100);
    ret = session.GetDocument(doc.Id, configID);

    if ((DateTime.Now - start).TotalSeconds &gt; 15)
    {
        throw new ApplicationException(&quot;Semantria did not return with 15 seconds.&quot;);
    }
  } while (ret.Status == Semantria.Com.TaskStatus.QUEUED);

  if (ret.Status == Semantria.Com.TaskStatus.PROCESSED)
  {
    docResults.Add(ret);
  }
  else
  {
    throw new ApplicationException(&quot;Error processing document: &quot; + ret.Status.ToString());
  }
}</pre>
<p>As stated at the beginning of this article under Initialization, the default 
number of entities is 5 (themes is also 5 and topics is 10).&nbsp; In this 
article I have increased the limit to 50, which is the maximum.</p>
<h2>Running the Demo</h2>
<p>The screenshots that I've been using come from parsing this page:
<a href="http://en.wikipedia.org/wiki/Computer_science">
http://en.wikipedia.org/wiki/Computer_science</a>.&nbsp; You can of course enter 
your own URL in the demo application (try a Code Project article, the results 
are often interesting.)&nbsp; The code that does the processing runs each 
service request asynchronously, marshalling the UI data grid updates back onto 
the UI thread (not shown).&nbsp; I also cache (using the URL's hash code) the 
scraped web page returned by AlchemyAPI so I'm not constantly making a &quot;get page 
content&quot; request to AlchemyAPI when testing the same web pages over and over.</p>
<pre>/// &lt;summary&gt;
/// Process the URL with AlchemyAPI, OpenCalais, and Semantra NLP's.
/// &lt;/summary&gt;
protected async void Process(object sender, EventArgs args)
{
  btnProcess.Enabled = false;
  ClearAllGrids();
  string url = tbUrl.Text;
  sbStatus.Text = &quot;Acquiring page content...&quot;;

  // Eases debugging when we comment out one or more of the NLP's to test the other.
  double alchemyTime = 0;
  double calaisTime = 0;
  double semantriaTime = 0;

  string pageText = await Task.Run(() =&gt; GetUrlText(url));

  sbStatus.Text = &quot;Processing results with Alchemy...&quot;;

  double alchemyTime = await Task.Run(() =&gt;
  {
    LoadAlchemyResults(pageText);
    return ElapsedTime();
  });

  sbStatus.Text = &quot;Processing results with OpenCalais...&quot;;

  double calaisTime = await Task.Run(() =&gt;
  {
    LoadCalaisResults(pageText);
    return ElapsedTime();
  });

  sbStatus.Text = &quot;Processing results with Semantria...&quot;;

  double semantriaTime = await Task.Run(() =&gt;
  {
    LoadSemantriaResults(pageText);
    return ElapsedTime();
  });
  
  sbStatus.Text = &quot;Done processing.&quot;;

  ReportTimes(alchemyTime, calaisTime, semantriaTime);
  btnProcess.Enabled = true;
}</pre>
<p>Using .NET's <code>Task.Run</code> allows the to UI remain responsive so you can interact with it while other 
results are still coming in.</p>
<h3>Keys</h3>
<p>Of course, to run the demo, you will need to register with each provider and 
obtain your own API keys.&nbsp; These go into their respective files in the 
bin\debug folder:</p>
<p>alchemyapikey.txt</p>
<p>[your key]</p>
<p>calaisapikey.txt</p>
<p>[your key]</p>
<p>semantriaapikey.txt</p>
<p>[your consumer key]<br>
[your secret key]</p>
<h2>A Second Example</h2>
<p>I decided to throw something more interesting at these providers--Rudolf 
Steiner's Chapter 3 &quot;Culture, Law, and Economics&quot; of his lecture series
<a href="http://wn.rsarchive.org/Books/GA024/English/AP1985/GA024_a03.html">The 
Renewal of the Social Organism</a>.&nbsp; The results are interesting and reveal 
the differences between the three NLP's.&nbsp; Keep in mind that I'm using the 
Simple Format with OpenCalais and so the results may not represent its full 
semantic processing capability.&nbsp; It was being the scope of this article to 
parse the resulting RDF.</p>
<p><img border="0" src="proctime2.png" width="242" height="184"></p>
<h3>Resulting Entities</h3>
<h4>AlchemyAPI Entities</h4>
<table>
	<thead>
		<tr>
			<th>type</th>
			<th>relevance</th>
			<th>count</th>
			<th>text</th>
		</tr>
	</thead>
	<tr>
		<td>PrintMedia</td>
		<td>0.734508</td>
		<td>1</td>
		<td>Law and Economics</td>
	</tr>
	<tr>
		<td>Crime</td>
		<td>0.684892</td>
		<td>1</td>
		<td>monopolization</td>
	</tr>
	<tr>
		<td>JobTitle</td>
		<td>0.635413</td>
		<td>1</td>
		<td>business manager</td>
	</tr>
	<tr>
		<td>Facility</td>
		<td>0.61222</td>
		<td>1</td>
		<td>St. Simon</td>
	</tr>
	<tr>
		<td>JobTitle</td>
		<td>0.606995</td>
		<td>1</td>
		<td>official</td>
	</tr>
	<tr>
		<td>Person</td>
		<td>0.602684</td>
		<td>1</td>
		<td>Marx</td>
	</tr>
	<tr>
		<td>Person</td>
		<td>0.581026</td>
		<td>1</td>
		<td>Fourier</td>
	</tr>
</table>
<h4>OpenCalais Entities</h4>
<p>(No topics or events were returned)</p>
<table>
	<thead>
		<tr>
			<th>Value</th>
			<th>Frequency</th>
			<th>Relevance</th>
			<th>Type</th>
		</tr>
	</thead>
	<tr>
		<td>natural law</td>
		<td>2</td>
		<td>0.286</td>
		<td>IndustryTerm</td>
	</tr>
	<tr>
		<td>devise external systems</td>
		<td>1</td>
		<td>0.251</td>
		<td>IndustryTerm</td>
	</tr>
	<tr>
		<td>economic services</td>
		<td>1</td>
		<td>0.318</td>
		<td>IndustryTerm</td>
	</tr>
	<tr>
		<td>manager</td>
		<td>1</td>
		<td>0.314</td>
		<td>Position</td>
	</tr>
	<tr>
		<td>government official</td>
		<td>1</td>
		<td>0.239</td>
		<td>Position</td>
	</tr>
	<tr>
		<td>business manager</td>
		<td>1</td>
		<td>0.314</td>
		<td>Position</td>
	</tr>
	<tr>
		<td>shopkeeper</td>
		<td>1</td>
		<td>0.239</td>
		<td>Position</td>
	</tr>
</table>
<h4>Semantria Entities</h4>
<table>
	<thead>
		<tr>
			<th>Type</th>
			<th>Evidence</th>
			<th>Confident</th>
			<th>IsAbout</th>
			<th>EntityType</th>
			<th width="216">Title</th>
			<th>Label</th>
			<th>SentimentScore</th>
			<th>SentimentPolarity</th>
		</tr>
	</thead>
	<tr>
		<td>named</td>
		<td>7</td>
		<td>True</td>
		<td>False</td>
		<td>Job Title</td>
		<td width="216">manager</td>
		<td>Job Title</td>
		<td>0.171760261</td>
		<td>neutral</td>
	</tr>
	<tr>
		<td>named</td>
		<td>4</td>
		<td>True</td>
		<td>False</td>
		<td>Person</td>
		<td width="216">Marx</td>
		<td>Person</td>
		<td>0.294535</td>
		<td>neutral</td>
	</tr>
	<tr>
		<td>named</td>
		<td>2</td>
		<td>True</td>
		<td>False</td>
		<td>Quote</td>
		<td width="216">“It is impossible to bring about satisfactory conditions 
		through this organic formation of society. It can be done only through a 
		suitable economic organization.”</td>
		<td>Quote</td>
		<td>0.218072414</td>
		<td>neutral</td>
	</tr>
	<tr>
		<td>named</td>
		<td>1</td>
		<td>True</td>
		<td>False</td>
		<td>Quote</td>
		<td width="216">“social question”</td>
		<td>Quote</td>
		<td>0</td>
		<td>neutral</td>
	</tr>
	<tr>
		<td>named</td>
		<td>1</td>
		<td>True</td>
		<td>False</td>
		<td>Quote</td>
		<td width="216">“simplicity”</td>
		<td>Quote</td>
		<td>0.49</td>
		<td>neutral</td>
	</tr>
	<tr>
		<td>named</td>
		<td>1</td>
		<td>True</td>
		<td>False</td>
		<td>Quote</td>
		<td width="216">“self-evident fact”</td>
		<td>Quote</td>
		<td>0</td>
		<td>neutral</td>
	</tr>
	<tr>
		<td>named</td>
		<td>1</td>
		<td>True</td>
		<td>False</td>
		<td>Quote</td>
		<td width="216">“social question”</td>
		<td>Quote</td>
		<td>0</td>
		<td>neutral</td>
	</tr>
</table>
<h3>AlchemyAPI Concepts</h3>
<table>
	<thead>
		<tr>
			<th>text</th>
			<th>relevance</th>
			<th>dbpedia</th>
			<th>freebase</th>
			<th>opencyc</th>
		</tr>
	</thead>
	<tr>
		<td>Sociology</td>
		<td>0.965445</td>
		<td>http://dbpedia.org/resource/Sociology</td>
		<td>http://rdf.freebase.com/ns/m.06ms6</td>
		<td>http://sw.opencyc.org/concept/Mx4rvVvb3pwpEbGdrcN5Y29ycA</td>
	</tr>
	<tr>
		<td>Law</td>
		<td>0.445281</td>
		<td>http://dbpedia.org/resource/Law</td>
		<td>http://rdf.freebase.com/ns/m.04gb7</td>
		<td>http://sw.opencyc.org/concept/Mx4rvV1TLJwpEbGdrcN5Y29ycA</td>
	</tr>
	<tr>
		<td>Economy</td>
		<td>0.40107</td>
		<td>http://dbpedia.org/resource/Economy</td>
		<td>http://rdf.freebase.com/ns/m.0gfps3</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>Economics</td>
		<td>0.391207</td>
		<td>http://dbpedia.org/resource/Economics</td>
		<td>http://rdf.freebase.com/ns/m.02j62</td>
		<td>http://sw.opencyc.org/concept/Mx4rvqlEOpwpEbGdrcN5Y29ycA</td>
	</tr>
	<tr>
		<td>Human</td>
		<td>0.36315</td>
		<td>http://dbpedia.org/resource/Human</td>
		<td>http://rdf.freebase.com/ns/m.0dgw9r</td>
		<td>http://sw.opencyc.org/concept/Mx4rIcwFloGUQdeMlsOWYLFB2w</td>
	</tr>
	<tr>
		<td>Religion</td>
		<td>0.353719</td>
		<td>http://dbpedia.org/resource/Religion</td>
		<td>http://rdf.freebase.com/ns/m.06bvp</td>
		<td>http://sw.opencyc.org/concept/Mx4rvVkCHZwpEbGdrcN5Y29ycA</td>
	</tr>
	<tr>
		<td>Spirituality</td>
		<td>0.344812</td>
		<td>http://dbpedia.org/resource/Spirituality</td>
		<td>http://rdf.freebase.com/ns/m.070wm</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>Communism</td>
		<td>0.280482</td>
		<td>http://dbpedia.org/resource/Communism</td>
		<td>http://rdf.freebase.com/ns/m.01m59</td>
		<td>http://sw.opencyc.org/concept/Mx4rvVi0EZwpEbGdrcN5Y29ycA</td>
	</tr>
</table>
<h3>AlchemyAPI Keywords</h3>
<p>(I'm only showing the first 10 of the 250 keywords returned.)</p>
<table>
	<tr>
		<td>life</td>
		<td>0.926948</td>
	</tr>
	<tr>
		<td>cultural life</td>
		<td>0.884749</td>
	</tr>
	<tr>
		<td>economic life</td>
		<td>0.766198</td>
	</tr>
	<tr>
		<td>economic power</td>
		<td>0.720022</td>
	</tr>
	<tr>
		<td>free cultural life</td>
		<td>0.717939</td>
	</tr>
	<tr>
		<td>practical life</td>
		<td>0.669134</td>
	</tr>
	<tr>
		<td>modern social movement</td>
		<td>0.668291</td>
	</tr>
	<tr>
		<td>spiritual life</td>
		<td>0.654856</td>
	</tr>
	<tr>
		<td>nature</td>
		<td>0.638823</td>
	</tr>
	<tr>
		<td>individual wills</td>
		<td>0.635454</td>
	</tr>
</table>
<p>..etc..</p>
<h3>Semantria Topics</h3>
<table>
	<thead>
		<tr>
			<th>Title</th>
			<th>Type</th>
			<th>Hitcount</th>
			<th>StrengthScore</th>
			<th>SentimentScore</th>
			<th>SentimentPolarity</th>
			<th>Label</th>
		</tr>
	</thead>
	<tr>
		<td>Science</td>
		<td>concept</td>
		<td>0</td>
		<td>0.78942883</td>
		<td>0.121833332</td>
		<td>neutral</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>Economics</td>
		<td>concept</td>
		<td>0</td>
		<td>0.748247862</td>
		<td>0.414984226</td>
		<td>neutral</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>Law</td>
		<td>concept</td>
		<td>0</td>
		<td>0.7397579</td>
		<td>0.356725723</td>
		<td>neutral</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>Education</td>
		<td>concept</td>
		<td>0</td>
		<td>0.494773239</td>
		<td>0.351259947</td>
		<td>neutral</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>Science</td>
		<td>query</td>
		<td>3</td>
		<td>0</td>
		<td>0.750133157</td>
		<td>positive</td>
		<td>&nbsp;</td>
	</tr>
</table>
<h3>Semantria Themes</h3>
<table>
	<thead>
		<tr>
			<th>Evidence</th>
			<th>IsAbout</th>
			<th>StrengthScore</th>
			<th>SentimentScore</th>
			<th>SentimentPolarity</th>
			<th>Title</th>
		</tr>
	</thead>
	<tr>
		<td>7</td>
		<td>True</td>
		<td>2.95010757</td>
		<td>0.7593447</td>
		<td>positive</td>
		<td>individual persons</td>
	</tr>
	<tr>
		<td>7</td>
		<td>False</td>
		<td>2.93402934</td>
		<td>7.267939</td>
		<td>positive</td>
		<td>economic life</td>
	</tr>
	<tr>
		<td>7</td>
		<td>True</td>
		<td>2.7541132</td>
		<td>-13.2000027</td>
		<td>negative</td>
		<td>evils — evils</td>
	</tr>
	<tr>
		<td>7</td>
		<td>True</td>
		<td>2.544567</td>
		<td>6.680146</td>
		<td>positive</td>
		<td>Socialist thinkers</td>
	</tr>
	<tr>
		<td>7</td>
		<td>True</td>
		<td>2.48574352</td>
		<td>9.6</td>
		<td>positive</td>
		<td>wide range</td>
	</tr>
</table>
<h2>Conclusions</h2>
<p>The testing here is not exhaustive--some may argue not even comprehensive.&nbsp; 
I am not testing high throughputs and haven't simulated customer service 
issues.&nbsp; All three providers replied very quickly when I emailed them that 
I was writing this article, and I've had excellent and helpful conversations 
with all of them.&nbsp; After working with each provider, I realized that they 
each would deserve a &quot;deep dive&quot; article on their own.&nbsp; Even this 
high-level review has taken a considerable amount of time and I have glossed 
over (or outright skipped) many of the features of these providers.&nbsp; </p>
<p>I strongly suggest that you invest each provider in detail yourself to see 
what additional features and capabilities exist.&nbsp; Especially with regards 
to OpenCalais, I would strongly suggest that anyone interested in using this 
service further investigate the RDF output.</p>
<p>Also, as a general criticism, each provider would do well to explicitly 
define what the various terms mean in their API's and the collection attributes.&nbsp; 
If one is to use these services for serious analysis of documents, an exact 
meaning is a requirement.</p>
<p>Lastly, I find the concept of Natural Language Processing intriguing and that 
it holds many possibilities for helping to filter and analyze the vast and 
growing amount of information out there on the web.&nbsp; However, I'm not quite 
sure exactly how one uses the output of an NLP service in a productive way that 
goes beyond simple keyword matching.&nbsp; Some people will of course be 
interested in whether the sentiment is positive or negative, and I think the 
idea of extracting concepts (AlchemyAPI) and topics (Semantria) are useful in 
extracting higher level abstractions regarding a document.&nbsp; NLP is 
therefore an interesting field of study and I believe that the people who 
provide NLP services would benefit from the feedback of users to increase the 
value of their service.</p>

</body>

</html>